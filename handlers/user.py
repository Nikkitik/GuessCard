from random import choice

from aiogram import F, Router

from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

import keyboards.inline as inline_keyboard
import keyboards.reply as reply_keyboard

user_router = Router()


@user_router.message(CommandStart())
async def start(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –º–æ–π –¥—Ä—É–≥!\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –∏ –Ω–∞—á–Ω–µ–º',
                         reply_markup=inline_keyboard.level)


@user_router.message(Command('level'))
async def level(message: Message):
    await message.edit_text('–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –∏ –Ω–∞—á–Ω–µ–º',
                            reply_markup=inline_keyboard.level)


@user_router.message((F.text == 'üü•') | (F.text == '‚¨õÔ∏è'))
async def compare_answers(message: Message):
    card, suit = generate_card()

    answer = message.text

    correct_answer_print = f'–í–µ—Ä–Ω–æ! –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª {card}{suit}'
    wrong_answer_print = f'–ù–µ–≤–µ—Ä–Ω–æ! –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª {card}{suit}'

    if answer == 'üü•' and suit in ['‚ô¶Ô∏è', '‚ô•Ô∏è']:
        await message.answer(correct_answer_print)
    elif answer == '‚¨õÔ∏è' and suit in ['‚ô£Ô∏è', '‚ô†Ô∏è']:
        await message.answer(correct_answer_print)
    else:
        await message.answer(wrong_answer_print)


@user_router.message(F.text.in_({'‚ô¶Ô∏è', '‚ô•Ô∏è', '‚ô£Ô∏è', '‚ô†Ô∏è'}))
async def compare_answers(message: Message):
    card, suit = generate_card()

    answer = message.text

    correct_answer_print = f'–í–µ—Ä–Ω–æ! –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª {card}{suit}'
    wrong_answer_print = f'–ù–µ–≤–µ—Ä–Ω–æ! –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª {card}{suit}'

    if answer == suit:
        await message.answer(correct_answer_print)
    else:
        await message.answer(wrong_answer_print)


def generate_card():
    cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'T']
    suits = ['‚ô¶Ô∏è', '‚ô•Ô∏è', '‚ô£Ô∏è', '‚ô†Ô∏è']

    random_card = choice(cards)
    random_suit = choice(suits)

    return random_card, random_suit


@user_router.callback_query(F.data == 'level_color')
async def level_color(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≥–∞–¥–∞—Ç—å —Ü–≤–µ—Ç –º–∞—Å—Ç–∏',
                                  reply_markup=reply_keyboard.two_colors)


@user_router.callback_query(F.data == 'level_suit')
async def level_suit(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≥–∞–¥–∞—Ç—å –º–∞—Å—Ç—å',
                                  reply_markup=reply_keyboard.suits)


@user_router.callback_query(F.data == 'level_card')
async def level_card(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≥–∞–¥–∞—Ç—å –º–∞—Å—Ç—å',
                                  reply_markup=reply_keyboard.cards)
